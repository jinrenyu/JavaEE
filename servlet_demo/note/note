1. 功能说明:
a.) 实现用户的登陆校验, 要求检测当用户名不存在的时候, 给用户响应的提示;
当用户存在且密码不正确的时候也能够有响应的提示.
用户名和密码信息要求查询数据库进行校验.


2. controller(action)/service/dao
软件架构的分层(MVC,(model(模型业务) view(视图) controller(控制器))):

controller(控制层): 此处的代码, 只负责接受业务层的返回结果, 然后决定
跳转到哪个视图页面
model(模型业务层): 该层中的代码, 负责对前台接受到的数据, 进行具体的处理
(数据的拼接/校验/转换/去调用DAO的代码)
view(视图层): 它一般是一个页面(jsp页面/html页面/php的ui页面),
视图层只负责数据展现, 它决定了从后台接受过来的数据的展现形式. 或者接受
用户的输入并实现一些简单的前台校验(用户输入的字符长度或者是否含有一些
特殊的符号...).

entity(实体层): 直接和数据库中的存储表做映射, 即实现ORM
dao(数据访问层): 它只负责对数据从数据库中的增删改查

2. servlet注解, 从servlet3.0规范, servlet开始支持注解配置

3. servlet中的过滤器, 它相当于我们平常生活中使用的水过滤膜,
如果设置了过滤器, 则无论请求从用户中发送过来, 还是响应由服务器发送回给
客户端, 都需要经过过滤器的类

a.) 过滤器的init方法会在web应用启动的时候便会被调用, 如果有多个过滤器,
其启动顺序由web应用服务自行决定不收<filter>和<filter-mapping>
标签顺序的影响, 并且过滤器总会先于servlet实例初始化

b.) 假设两个过滤器的适配路径相同, <filter-mapping>在配置文件更靠近上方的
过滤器会先被调用, 然后通过过滤器执行的链式结构传递给相匹配的其他过滤器

c.) 过滤器书写的书写以"chain.doFilter(request, response);"
在该代码上方的业务代码先处理用户发送过来的请求和响应对象, 而这行代码下方的业务代码
处理的是服务器响应之后的请求和响应对象

d.) 过滤器的配置中同样具有类似于Servlet的<init-parm>配置, 其配置
方法和Servlet一样, 只是调用获取的时候只能同过init方法中的FilterConfig
对象的getintiParamter()方法获取配置的参数, 如果其他的方法需要使用到
这个初始化的参数, 请把使用参数设置为类的成员

f.) 过滤器默认只会过滤用户发送过来的请求(Request), 对于服务器内部的
转发和include过滤不会进行过滤, 如果需要对include和forward的请求
也进行过滤则需要配置过滤器中的<filter-mapping>元素下的<dispatcher>
子元素, 使他们也被包含进过滤器要过滤的范围.




